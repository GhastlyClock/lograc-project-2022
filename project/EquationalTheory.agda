module EquationalTheory where

open import RenamingAndSubstitution

open import FGCBV
open import ESMonad using (Exceptions)

mutual
    data _⊢ᵛ_≡_ : {A : Ty} → (Γ : Ctx) → Γ ⊢ᵛ A  → Γ ⊢ᵛ A → Set where

        ≡-refl : {Γ : Ctx} {A : Ty} {V : Γ ⊢ᵛ A} →
            -----------------------------------------
            Γ ⊢ᵛ V ≡ V
        ≡-symm : {Γ : Ctx} {A : Ty} {V W : Γ ⊢ᵛ A} →
            Γ ⊢ᵛ V ≡ W →
            -----------------------------------------
            Γ ⊢ᵛ W ≡ V
        ≡-trans : {Γ : Ctx} {A : Ty} {V W U : Γ ⊢ᵛ A} →
            Γ ⊢ᵛ V ≡ W →
            Γ ⊢ᵛ W ≡ U →
            -----------------------------------------
            Γ ⊢ᵛ V ≡ U

        cong-`λ : {Γ : Ctx} {A B : Ty} {M N : (Γ ,, A) ⊢ᶜ B} → 
            (Γ ,, A) ⊢ᶜ M ≡ N →
            -----------------------------------------
            Γ ⊢ᵛ `λ M ≡ `λ N


        η-⋆ : {Γ : Ctx} {V : Γ ⊢ᵛ unit} →
            -----------------------------------------
            Γ ⊢ᵛ V ≡ ⋆

        η-`λ : {Γ : Ctx} {A B : Ty} {V : Γ ⊢ᵛ (A ⇒ B)} →
            -----------------------------------------
            Γ ⊢ᵛ V ≡ `λ (app (sub-v wk-sub V) (var Z))



    data _⊢ᶜ_≡_ : {A : Ty} → (Γ : Ctx) → Γ ⊢ᶜ A  → Γ ⊢ᶜ A → Set where

        ≡-refl : {Γ : Ctx} {A : Ty} {M : Γ ⊢ᶜ A} →
            -----------------------------------------
            Γ ⊢ᶜ M ≡ M
        ≡-symm : {Γ : Ctx} {A : Ty} {M N : Γ ⊢ᶜ A} →
            Γ ⊢ᶜ M ≡ N →
            -----------------------------------------
            Γ ⊢ᶜ N ≡ M
        ≡-trans : {Γ : Ctx} {A : Ty} {M N O : Γ ⊢ᶜ A} →
            Γ ⊢ᶜ M ≡ N →
            Γ ⊢ᶜ N ≡ O →
            -----------------------------------------
            Γ ⊢ᶜ M ≡ O


        cong-app : {Γ : Ctx} {A B : Ty} {V V' : Γ ⊢ᵛ (A ⇒ B)} {U U' : Γ ⊢ᵛ A} →
            Γ ⊢ᵛ V ≡ V' →
            Γ ⊢ᵛ U ≡ U' →
            -------------------------------------------------------
            Γ ⊢ᶜ app V U ≡ app V' U'
        
        cong-letin : {Γ : Ctx} {A B : Ty} {M M' : Γ ⊢ᶜ A} {N N' : (Γ ,, A) ⊢ᶜ B} →
            Γ ⊢ᶜ M ≡ M' →
            (Γ ,, A) ⊢ᶜ N ≡ N' →
            -------------------------------------------------------
            Γ ⊢ᶜ (`let M `in N) ≡ (`let M' `in N')
        
        cong-return : {Γ : Ctx} {A : Ty} {V V' : Γ ⊢ᵛ A} →
            Γ ⊢ᵛ V ≡ V' →
            -----------------------------------------
            Γ ⊢ᶜ return V ≡ return V'


        β-`λ : {Γ : Ctx} {A B : Ty} → {M : (Γ ,, A) ⊢ᶜ B} {V : Γ ⊢ᵛ A} → 
            -------------------------------------------------------
            Γ ⊢ᶜ app (`λ M) V ≡ (M [ V ])
            

        η-letin : {Γ : Ctx} {A : Ty} {M : Γ ⊢ᶜ A} →
            -------------------------------------------------------
            Γ ⊢ᶜ M ≡ (`let M `in return (var Z))

        β-letin :  {Γ : Ctx} {A B : Ty} {V : Γ ⊢ᵛ A} {M : Γ ,, A ⊢ᶜ B} →
            ---------------------------------------------------------------------------
            Γ ⊢ᶜ `let return V `in M ≡ (M [ V ])

        let-assoc :  {Γ : Ctx} {A B C : Ty} {M : Γ ⊢ᶜ A} {N : Γ ,, A ⊢ᶜ B} {O : Γ ,, B ⊢ᶜ C} →
            ---------------------------------------------------------------------------
            Γ ⊢ᶜ `let ( `let M `in N ) `in O ≡ (`let M `in (`let N `in ren-c (exts-ren S) O))


            
        let-put : {Γ : Ctx} {A B : Ty} {V : Γ ⊢ᵛ TState} {M : Γ ⊢ᶜ A} {N : Γ ,, A ⊢ᶜ B} →
            ---------------------------------------------------------------------------
            Γ ⊢ᶜ `let `put V M `in N ≡ `put V (`let M `in N)

        let-get : {Γ : Ctx} {A B : Ty} {M : Γ ,, TState ⊢ᶜ A} {N : Γ ,, A ⊢ᶜ B} →
            ---------------------------------------------------------------------------
            Γ ⊢ᶜ `let `get M `in N  ≡ `get (`let M `in ren-c (exts-ren wk-ren) N)

        put-get : {Γ : Ctx} {A B : Ty} {V : Γ ⊢ᵛ TState} {M : Γ ,, TState ⊢ᶜ A}  → 
            ---------------------------------------------------------------------------
            Γ  ⊢ᶜ `put V (`get M) ≡ `put V (M [ V ])

        η-get : {Γ : Ctx} {A : Ty} {M : Γ ⊢ᶜ A} →
            ---------------------------------------------------------------------------
            Γ ⊢ᶜ `get (ren-c S M)  ≡  M

        put-put : {Γ : Ctx} {A : Ty} {V W : Γ ⊢ᵛ TState} {M : Γ ⊢ᶜ A} →
            ----------------------------------------------------------------------------
            Γ ⊢ᶜ `put V (`put W M)  ≡ `put W M

        raise-put : {Γ : Ctx} {A : Ty} {V : Γ ⊢ᵛ TState} {E : Exceptions} → 
            ------------------------------------------------
            Γ ⊢ᶜ `put V (`raise E) ≡ `raise {Γ} {A} E

        raise-get : {Γ : Ctx} {A : Ty} {V : Γ ⊢ᵛ TState} {E : Exceptions} →
            ---------------------------------------------------------------------------
            Γ ⊢ᶜ `get (`raise E) ≡ `raise {Γ} {A} E

        raise-let : {Γ : Ctx} {A B : Ty} {V : Γ ⊢ᵛ TState} {E : Exceptions} {M : Γ ,, A ⊢ᶜ B} →
            ----------------------------------------------------------------------------
            Γ ⊢ᶜ `let `raise E `in M ≡ `raise E




    
     